Model Writing vs. Prompting
===================================================================

.. include:: /_static/feedback.rst

An optimization problem must be translated to a mathematical formulation or code in order to solve for the optimal solution. 
The mathematical language used to translate a problem description into an optimization model is well defined - this is the realm of operations research and mathematical programming.  
Below, we review the key elements of this process. 

Importance of a Clear Problem Statement
-----------------------------------------------------------

Problem statements are the foundation of any optimization application, whether you plan to write the mathematical formulation and code yourself or use a custom GPT to help with the translation.
The benefits of devoting time to crafting a problem statement for your application include:

- Aligning multiple stakeholders and setting expectations
- Identifying any competing objectives
- Documentation around your application

A well-posed problem statement should include all of the key components of an optimization model, including information about:

- Which decisions are being made?
- What constraints or restrictions must be satisfied for the decisions to be considered feasible?
- How can we identify the best among alternative feasible decision outcomes? Are we trying to minimize or maximize something?

Although a problem statement need not explicitly contain mathematical notation, inequalities or functions, having a precise and complete description of the above information will make it easier for a human (or AI agent) to construct a mathematical model that accurately represents the decision problem.

In most cases data should be separated from the model, allowing the problem to be defined in a general or abstract way (e.g., `Determine how much of each product should be produced at each facility.`).
Then, after a mathematical model is constructed, specific sets of data (e.g., a spreadsheet or text file containing a list of facilities, a list of products, cost and demand data) can be loaded as input to construct and solve individual instance of the decision problem.

Separation of the abstract problem description and problem problem data allows problems to be more simply stated, and reused with different data sets.

Components of an Optimization Model
------------------------------------------

Educational resources for learning about optimization, model writing, and how the
`algorithms <https://www.gurobi.com/resources/mixed-integer-programming-mip-a-primer-on-the-basics/>`_
work are listed here: :ref:`Educational Resources <education>`.

Understanding the key components of an optimization model is critical when reviewing formulations and code generated by a custom GPT.

The main components of an optimization model are:

- **Decision Variables:** The set of variables representing choices that must be made.  For example, 'production rate' or 'machine on/off status'. Note that a variables' allowed set of values can be continuous (i.e., any number in a specified range), integer (i.e., 1, 2, 3, etc.), or binary (i.e., 0 or 1).
- **Constraints:** Constraints define relationships between the values of the variables that must be satisfied for set of decision to be considered feasible. They can represent tradeoffs and limitations that must be accounted for, and criteria that must be satisfied. For example, 'no more than 3 workers scheduled on any day' or 'at least 100 units in inventory at all times'.
- **Objective:** The goal of your application. For example, 'minimize cost' or 'maximize reliability'.
- **Parameters and Data:** The input data required to not just run the model, but to make the model represent exactly the situation at hand.  For example, 'price of '

Translation of Problem Statement into Mathematical Formulation: Two Options
--------------------------------------------------------------------------------

AI based tools offer a new way to transform a problem statement into a mathematical optimization model and code.
In contrast to a more traditional approach in which an optimization expert develops a mathematical model from a problem statement, implements that model in code, and runs the code to produce solutions to the model; Gurobi Model Builder can formulate, implement and run a mathematical optimization model nearly instantly.
Therefore, crafting an accurate and complete problem statement, as a prompt, is especially important when using Gurobi Model builder, as that prompt will be the basis for all output.

Review, Validate and Iterate
-------------------------------

Whether the model was constructed by a human expert or custom GPT, we will still need to review the results.
One component of this is to review the description and implementation of the model to make sure that it includes all key components: do the variables defined in the model account for all decisions that must be made? Are all constraints in the problem description encoded in the model? Do the output solutions make sense?

Mistakes could appear at any step of the process and additional suggestions for troubleshooting models can be found in the :ref:`Testing` section.

Once it has been validated that the model and output accurately solve the initial problem, a next step is to investigate whether or not the *intended* problem was accurately described in the initial problem statement.
At this step we may find that the original problem statement was missing an important constraint or consideration and must be amended, this process can be iterated until the desired results are achieved.
